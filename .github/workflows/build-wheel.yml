name: Build custom_rasterizer wheel (Python 3.11, CUDA 12.5)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: nvidia/cuda:12.5.0-devel-ubuntu22.04
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install system dependencies
        run: |
          apt-get update
          apt-get install -y python3.11 python3.11-dev python3-pip build-essential ninja-build binutils
          ln -s /usr/bin/python3.11 /usr/bin/python

      - name: Install PyTorch with CUDA 12.1 (compatible with 12.5)
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install torch==2.2.0+cu121 torchvision==0.17.0+cu121 --index-url https://download.pytorch.org/whl/cu121

      - name: Patch for CUDA 12.5 compatibility
        run: |
          # Update all CUDA version references
          find . -type f \( -name "*.cpp" -o -name "*.cu" -o -name "*.h" -o -name "*.pyx" \) \
            -exec sed -i 's/11\.0/12.5/g' {} +
          find . -type f \( -name "*.cpp" -o -name "*.cu" -o -name "*.h" -o -name "*.pyx" \) \
            -exec sed -i 's/110/125/g' {} +

      - name: Build the wheel
        run: |
          export CUDA_HOME=/usr/local/cuda
          export PATH=/usr/local/cuda/bin:$PATH
          export TORCH_CUDA_ARCH_LIST="8.0;8.6;9.0"  # Support for T4 (8.0), A10G (8.6), A100 (8.0), RTX 40xx (9.0)
          export FORCE_CUDA=1
          export MAX_JOBS=4
          
          # Clean previous builds
          python setup.py clean --all
          
          # Build with verbose output
          python setup.py bdist_wheel --verbose

      - name: Verify wheel contents
        run: |
          # List all files in wheel
          unzip -l dist/*.whl
          
          # Check for CUDA dependencies in compiled binaries
          mkdir -p tmp_inspect
          unzip -d tmp_inspect dist/*.whl
          find tmp_inspect -name "*.so" -exec ldd {} \; | grep cuda || echo "No CUDA dependencies found"
          find tmp_inspect -name "*.so" -exec objdump -p {} \; | grep -A10 NEEDED || echo "No shared library dependencies found"

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: custom_rasterizer-cuda12.5-wheel
          path: dist/*.whl
          retention-days: 7

      - name: Print success message
        run: |
          echo "âœ… Wheel built successfully!"
          echo "Download from the Artifacts tab above"
          echo "Compatible with CUDA 12.5 environments"
